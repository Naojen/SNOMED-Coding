import os
import gc
import time
import subprocess
import pandas as pd
from langchain_community.document_loaders import CSVLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import FAISS
from langchain_community.embeddings import HuggingFaceEmbeddings
import faiss
import numpy as np
from langchain_community.docstore.in_memory import InMemoryDocstore
from llama import Llama  # Import Meta's LLaMa

#  Load Meta’s LLaMa model (instead of Ollama)
ckpt_dir = "/mnt/model"  # The model directory from Docker mount
tokenizer_path = "/mnt/model/tokenizer.model"  # Path to tokenizer

generator = Llama.build(
    ckpt_dir=ckpt_dir,
    tokenizer_path=tokenizer_path,
    max_seq_len=8192,
    max_batch_size=4,
)
print(" Meta's LLaMa Model Loaded Successfully")

#  Instructions for LLaMa processing
summarization_instructions = """
    You are a clinical language model specialized in pathology. You are highly skilled at summarizing pathology reports with clarity, precision, and clinical relevance.
	Any given pathology report contains other information which are not needed while finding the topography and morphology of the tumor.
	So, summarize the given report from the perspective of finding the topography and morphology of the serious tumor.  Ensure that the summary contains only relevant information.
	Consider this example of pathology report, “Pathologic diagnosis: Ascending colon, 80 cm from anal verge, endoscopic biopsy --- Tubulovillous adenoma with some atypical glands and cells clusters.
	See Comment. Ancillary study for diagnosis: 1. Deep cut is done. 2. IHC stain for AE1/AE3 (highlight cell clusters) is done. Gross description: The specimen consists of a piece of tan soft tissue, 
	0.1x0.1x0.1 cm. All for section. Microscopic description: Sections show colon mucosa with superficial tubulovillous glands proliferation with high-grade dysplasia. There are some atypical glands and 
	cell clusters seen. Comment: The possibility of carcinoma arising in tubulovillous adenoma is highly suspicious; however, this specimen is too superficial to make a definited pathological diagnosis. 
	Further clinicopathological correlation and study are suggested. Note: The diagnosis is concurred in intradepartment consensus meeting on 2014/03/07.”
	This report has various information, but we need only a summary with respect to the morphology and topography of the serious tumour. 
	So, the summary of this report must have information about a serious tumor, its morphology and topography.  For this particular example, the user is expecting:
	The serious tumor has the morphology of Tubulovillous adenoma, and its topography or location is 80 cm from the anal verge.
    Important note:
	You sometimes tend to provide the wrong response. We analysed your error patterns and identified the following areas for improvement. Follow these instructions carefully to avoid making further errors:
	1. Do not infer or hallucinate information. Use only what is explicitly stated in the report. If unclear, follow the provided instructions for handling such cases.
	2. Verify the extracted morphology and topography before assigning a code. Ensure the assigned code aligns with the extracted information."""

morphology_extraction_instructions = """
From the summarized pathology report, extract **only the morphology** of the tumour. Do not give other informaiton. Keep it in short.
Remember the following points:
	1. In-Situ Tumors:
	   - Intramucosal adenocarcinoma is also considered in-situ because it is confined to the mucosal layer and does not invade beyond it. 
	   - For any malignant tumor, even for in-situ, consider the polyp also where it arise if there is any, while defining the morphology. 
	     For example, if the tumor morphology is adenocarcinoma in-situ arising in tubulovillous adenoma, then we should focus on both "adenocarcinoma in-situ" and "tubular adenoma" 
	     
	2. Additional Descriptive Features:
	   - If the report mentions features or components like "signet ring cells," "mucinous component," or "mucinous product" as part of the tumor description,
	     do not classify the morphology based on these features unless they are explicitly stated as the main tumor type.
	   - Always assign the Mcode based on the primary morphology term mentioned first in the report (e.g., “Adenocarcinoma” in “Adenocarcinoma with mucinous component”). 
	     Treat additional descriptions or cell features as secondary, not as the main morphology.
"""

topography_extraction_instructions = """
From the summarized pathology report, extract **only the topography** of the tumor. Do not give other information. Keep it short.
Remember the following points:
    1. If the tumor's location spans multiple anatomical sites, classify the topography based on the broader regional location (e.g., the side of the colon) rather than individual sites. 
	For instance, when the tumor location is described as "Rectum and Sigmoid colon," "Rectum to Sigmoid colon," or "Rectum-Sigmoid colon," these indicate involvement of multiple sites 
	within the left side of the colon. In such cases, assign the topography to "Left Colon," corresponding to the code 67995. Similarly, if the tumor spans locations on the right side of the colon,
	such as the ascending and transverse colon, classify it under "Right Colon." This approach ensures accurate representation of the tumor's regional extent.
    2. If the tumor location is provided as a distance from anal verge, return the complete statement, such as " 40 cm from the anal verge".
"""

morphology_denoise_prompt = """
You are a medical assistant. From the following pathology summary, extract only the key diagnostic term(s) describing the tumor morphology (histological type). 
Exclude modifiers, background context, and interpretations. Return a concise tumor type name, such as "adenocarcinoma" or "signet-ring cell carcinoma".
"""
topography_denoise_step1 = """
You are a medical assistant. From the given pathology summary, extract only the tumor's anatomical location (topography). 
If the report contains an explicit anatomical term (e.g., "sigmoid colon", "ascending colon"), extract and return only that term. 
However, if the location is not explicitly named but is described using a distance from the anal verge (e.g., "30 cm from anal verge"), extract and return the exact distance phrase. 
Ignore background details and modifiers. Return only the site name or the distance string, as provided.
"""
topography_denoise_step2 = """
You are a medical assistant. Based on the input text, determine the tumor's topography (anatomical site). 
If the input is already an explicit anatomical term (e.g., "Sigmoid colon", "Rectum"), return it as-is. 
However, if the input describes the location using distance from the anal verge (e.g., "40 cm from anal verge"), use the Distance to Topography Mapping below to identify and return the corresponding anatomical site. 
Return only the final anatomical term. Distance to Topography Mapping provided below:
    • 0–4 cm: Anus
    • 4–15 cm: Rectum
    • 15–17 cm: Rectosigmoid Junction
    • 17–57 cm: Sigmoid Colon
    • 57–82 cm: Descending Colon
    • 82–132 cm: Transverse Colon
    • 132–147 cm: Ascending Colon
    • 150 cm: Cecum
"""

final_morphology_selection_instructions = """
You are an expert in pathology coding. Your task is to analyze the extracted **morphology description** of a tumor and compare it with three possible SNOMED morphology codes and return the best one.
Only return your answer in this format:
The morphology is <Morphology> and its SNOMED Code is <BEST_MCODE>
Important note:
1. Accuracy in Identification: Ensure you do not confuse the identified morphology and the codes. Example: If you identify the morphology as CARCINOMA IN SITU, return M80102, not M80103 ( CARCINOMA, NOS).
2. Use only the provided SNOMED codes. Do not use codes from external sources like ICD. Ensure all assigned codes are strictly from the provided list.



"""

final_topography_selection_instructions = """
You are an expert in pathology coding. Your task is to analyze the extracted **topography location** of a tumor and compare it with three possible SNOMED topography codes and return the best one.
Only return your answer in this format:
The Topography is <Topography> and its SNOMED Code is <BEST_TCODE>
Important note:
1. Accuracy in Identification: Ensure you do not confuse the identified topography and the codes. Example: If you identify the topography as CECUM, return 67100, not 67000 (COLON, NOS).
2. Use only the provided SNOMED codes. Do not use codes from external sources like ICD. Ensure all assigned codes are strictly from the provided list.

"""

#  Normalize embeddings for cosine similarity
def normalize_embeddings(vectors):
    return vectors/np.linalg.norm(vectors, axis=1, keepdims=True)

#  Load CSV files into FAISS
def load_and_index_csv(csv_path):
    """Load SNOMED CSV and index it using FAISS for similarity search."""
    loader = CSVLoader(file_path=csv_path)
    documents = loader.load()

    text_splitter = RecursiveCharacterTextSplitter(chunk_size=512, chunk_overlap=50)
    chunks = text_splitter.split_documents(documents)

    embeddings = HuggingFaceEmbeddings(model_name="sentence-transformers/all-MiniLM-L6-v2")

    # Use FAISS properly with LangChain
    vectorstore = FAISS.from_documents(chunks, embeddings)
    
    return vectorstore

#  Load FAISS databases for RAG
topography_vectorstore = load_and_index_csv("Topography_SNOMED.csv")
morphology_vectorstore = load_and_index_csv("Morphology_SNOMED.csv")

#  Call Meta's LLaMa (Replacing Docker Calls)
def call_llama(content, instructions):
    """Run Meta's LLaMa model directly (Replaces Docker subprocess calls)"""
    complete_prompt = f"{instructions}\n{content}\n"

    dialog = [
        {"role": "system", "content": instructions},
        {"role": "user", "content": content},
    ]

    response = generator.chat_completion(
        [dialog],
        max_gen_len=512,  # Control max output length
        temperature=0.7,
        top_p=0.9,
    )

    return response[0]["generation"]["content"].strip()

#  RAG Query for Topography and Morphology
def rag_query(query, vectorstore):
    retriever = vectorstore.as_retriever(search_kwargs={"k": 3})  # Retrieve top 3 results
    retrieved_docs = retriever.invoke(query)
    context = "\n".join([doc.page_content for doc in retrieved_docs])
    return context

#  Validate and Finalize SNOMED Codes using LLaMa
def validate_topography_code(extracted_topography, retrieved_topography_codes):
    """Pass extracted topography and three retrieved SNOMED topography codes to LLaMa for final selection."""
    validation_prompt = f"""
    Extracted Topography: {extracted_topography}

    Possible SNOMED Topography Codes:
    {retrieved_topography_codes}

    {final_topography_selection_instructions}
    """
    return call_llama(validation_prompt, final_topography_selection_instructions)

def validate_morphology_code(extracted_morphology, retrieved_morphology_codes):
    """Pass extracted morphology and three retrieved SNOMED morphology codes to LLaMa for final selection."""
    validation_prompt = f"""
    Extracted Morphology: {extracted_morphology}

    Possible SNOMED Morphology Codes:
    {retrieved_morphology_codes}

    {final_morphology_selection_instructions}
    """
    return call_llama(validation_prompt, final_morphology_selection_instructions)
    
#  Main processing function
def main():
    while True:
        print("\nEnter your pathology report (or type 'exit' to quit):")
        user_input = input("> ").strip()

        if user_input.lower() == "exit":
            print("Exiting the program.")
            break

        #  Step 1: Summarization
        print("\nProcessing Summarization...")
        summary = call_llama(user_input, summarization_instructions)
        print("\nSummary:\n", summary)

        #  Step 2: Extract Morphology from Summary
        morphology_text = call_llama(summary, morphology_extraction_instructions)
        print("\nExtracted Morphology:\n", morphology_text)

        # Step 2b: Denoise Morphology
        morphology_clean = call_llama(morphology_text, morphology_denoise_prompt)
        print("\nDenoised Morphology:\n", morphology_clean)

        #  Step 3: Extract Topography from Summary
        topography_text = call_llama(summary, topography_extraction_instructions)
        print("\nExtracted Topography:\n", topography_text)

        # Step 3b: Denoise Topography (2-step)
        topography_extracted = call_llama(topography_text, topography_denoise_step1)
        topography_clean = call_llama(topography_extracted, topography_denoise_step2)
        print("\nDenoised Topography:\n", topography_clean)

        #  Step 4: Retrieve Topography Code using RAG
        print("\nFinding candidate Topography Codes using RAG...")
        topography_result = rag_query(topography_clean, topography_vectorstore)
        print("\nTopography Code retrieved:\n", topography_result)

        #  Step 5: Retrieve Morphology Code using RAG
        print("\nFinding candidates Morphology Codes using RAG...")
        morphology_result = rag_query(morphology_clean, morphology_vectorstore)
        print("\nMorphology Code Retrieved:\n", morphology_result)
        
        #  Step 6: Finalize the Best Topography Code
        final_topography_code = validate_topography_code(topography_text, topography_result)
        print("\nFinal Topography Code:\n", final_topography_code)

        #  Step 7: Finalize the Best Morphology Code
        final_morphology_code = validate_morphology_code(morphology_text, morphology_result)
        print("\nFinal Morphology Code:\n", final_morphology_code)

        #  Free memory
        gc.collect()
        time.sleep(1)

if __name__ == "__main__":
    main()
